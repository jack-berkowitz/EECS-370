instruction memory:
	instrMem[ 0 ] = 0x00810007 ( lw 0 1 7 )
	instrMem[ 1 ] = 0x008A0003 ( lw 1 2 3 )
	instrMem[ 2 ] = 0x000A0001 ( add 1 2 1 )
	instrMem[ 3 ] = 0x01010002 ( beq 0 1 2 )
	instrMem[ 4 ] = 0x0100FFFD ( beq 0 0 -3 )
	instrMem[ 5 ] = 0x01C00000 ( noop )
	instrMem[ 6 ] = 0x01800000 ( halt )
	instrMem[ 7 ] = 0x00000005 ( add 0 0 5 )
	instrMem[ 8 ] = 0xFFFFFFFF ( .fill -1 )
	instrMem[ 9 ] = 0x00000002 ( add 0 0 2 )

@@@
state before cycle 0 starts:
	pc = 0
	data memory:
		dataMem[ 0 ] = 0x00810007
		dataMem[ 1 ] = 0x008A0003
		dataMem[ 2 ] = 0x000A0001
		dataMem[ 3 ] = 0x01010002
		dataMem[ 4 ] = 0x0100FFFD
		dataMem[ 5 ] = 0x01C00000
		dataMem[ 6 ] = 0x01800000
		dataMem[ 7 ] = 0x00000005
		dataMem[ 8 ] = 0xFFFFFFFF
		dataMem[ 9 ] = 0x00000002
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x01C00000 ( noop )
		pcPlus1 = 0 (Don't Care)
	ID/EX pipeline register:
		instruction = 0x01C00000 ( noop )
		pcPlus1 = 0 (Don't Care)
		readRegA = 0 (Don't Care)
		readRegB = 0 (Don't Care)
		offset = 0 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x01C00000 ( noop )
		branchTarget 0 (Don't Care)
		eq ? False (Don't Care)
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 1 starts:
	pc = 1
	data memory:
		dataMem[ 0 ] = 0x00810007
		dataMem[ 1 ] = 0x008A0003
		dataMem[ 2 ] = 0x000A0001
		dataMem[ 3 ] = 0x01010002
		dataMem[ 4 ] = 0x0100FFFD
		dataMem[ 5 ] = 0x01C00000
		dataMem[ 6 ] = 0x01800000
		dataMem[ 7 ] = 0x00000005
		dataMem[ 8 ] = 0xFFFFFFFF
		dataMem[ 9 ] = 0x00000002
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x00810007 ( lw 0 1 7 )
		pcPlus1 = 1
	ID/EX pipeline register:
		instruction = 0x01C00000 ( noop )
		pcPlus1 = 0 (Don't Care)
		readRegA = 0 (Don't Care)
		readRegB = 0 (Don't Care)
		offset = 0 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x01C00000 ( noop )
		branchTarget 0 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 2 starts:
	pc = 1
	data memory:
		dataMem[ 0 ] = 0x00810007
		dataMem[ 1 ] = 0x008A0003
		dataMem[ 2 ] = 0x000A0001
		dataMem[ 3 ] = 0x01010002
		dataMem[ 4 ] = 0x0100FFFD
		dataMem[ 5 ] = 0x01C00000
		dataMem[ 6 ] = 0x01800000
		dataMem[ 7 ] = 0x00000005
		dataMem[ 8 ] = 0xFFFFFFFF
		dataMem[ 9 ] = 0x00000002
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x01C00000 ( noop )
		pcPlus1 = 2 (Don't Care)
	ID/EX pipeline register:
		instruction = 0x00810007 ( lw 0 1 7 )
		pcPlus1 = 1
		readRegA = 0
		readRegB = 0 (Don't Care)
		offset = 7
	EX/MEM pipeline register:
		instruction = 0x01C00000 ( noop )
		branchTarget 0 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 3 starts:
	pc = 2
	data memory:
		dataMem[ 0 ] = 0x00810007
		dataMem[ 1 ] = 0x008A0003
		dataMem[ 2 ] = 0x000A0001
		dataMem[ 3 ] = 0x01010002
		dataMem[ 4 ] = 0x0100FFFD
		dataMem[ 5 ] = 0x01C00000
		dataMem[ 6 ] = 0x01800000
		dataMem[ 7 ] = 0x00000005
		dataMem[ 8 ] = 0xFFFFFFFF
		dataMem[ 9 ] = 0x00000002
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x008A0003 ( lw 1 2 3 )
		pcPlus1 = 2
	ID/EX pipeline register:
		instruction = 0x01C00000 ( noop )
		pcPlus1 = 2 (Don't Care)
		readRegA = 0 (Don't Care)
		readRegB = 0 (Don't Care)
		offset = 0 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x00810007 ( lw 0 1 7 )
		branchTarget 8 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 0
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 4 starts:
	pc = 3
	data memory:
		dataMem[ 0 ] = 0x00810007
		dataMem[ 1 ] = 0x008A0003
		dataMem[ 2 ] = 0x000A0001
		dataMem[ 3 ] = 0x01010002
		dataMem[ 4 ] = 0x0100FFFD
		dataMem[ 5 ] = 0x01C00000
		dataMem[ 6 ] = 0x01800000
		dataMem[ 7 ] = 0x00000005
		dataMem[ 8 ] = 0xFFFFFFFF
		dataMem[ 9 ] = 0x00000002
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 0
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x000A0001 ( add 1 2 1 )
		pcPlus1 = 3
	ID/EX pipeline register:
		instruction = 0x008A0003 ( lw 1 2 3 )
		pcPlus1 = 2
		readRegA = 0
		readRegB = 0 (Don't Care)
		offset = 3
	EX/MEM pipeline register:
		instruction = 0x01C00000 ( noop )
		branchTarget 2 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 0 (Don't Care)
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x00810007 ( lw 0 1 7 )
		writeData = 8454151
	WB/END pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
end state

@@@
state before cycle 5 starts:
	pc = 4
	data memory:
		dataMem[ 0 ] = 0x00810007
		dataMem[ 1 ] = 0x008A0003
		dataMem[ 2 ] = 0x000A0001
		dataMem[ 3 ] = 0x01010002
		dataMem[ 4 ] = 0x0100FFFD
		dataMem[ 5 ] = 0x01C00000
		dataMem[ 6 ] = 0x01800000
		dataMem[ 7 ] = 0x00000005
		dataMem[ 8 ] = 0xFFFFFFFF
		dataMem[ 9 ] = 0x00000002
	registers:
		reg[ 0 ] = 0
		reg[ 1 ] = 8454151
		reg[ 2 ] = 0
		reg[ 3 ] = 0
		reg[ 4 ] = 0
		reg[ 5 ] = 0
		reg[ 6 ] = 0
		reg[ 7 ] = 0
	IF/ID pipeline register:
		instruction = 0x01010002 ( beq 0 1 2 )
		pcPlus1 = 4
	ID/EX pipeline register:
		instruction = 0x000A0001 ( add 1 2 1 )
		pcPlus1 = 3
		readRegA = 0
		readRegB = 0
		offset = 1 (Don't Care)
	EX/MEM pipeline register:
		instruction = 0x008A0003 ( lw 1 2 3 )
		branchTarget 5 (Don't Care)
		eq ? True (Don't Care)
		aluResult = 8454154
		readRegB = 0 (Don't Care)
	MEM/WB pipeline register:
		instruction = 0x01C00000 ( noop )
		writeData = 0 (Don't Care)
	WB/END pipeline register:
		instruction = 0x00810007 ( lw 0 1 7 )
		writeData = 8454151
end state
